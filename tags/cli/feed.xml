<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CLI on Cloud Artisan</title><link>https://cloudartisan.com/tags/cli/</link><description>Recent content in CLI on Cloud Artisan</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 02 Sep 2025 00:00:00 +1000</lastBuildDate><atom:link href="https://cloudartisan.com/tags/cli/feed.xml" rel="self" type="application/rss+xml"/><item><title>Claude Code Tips &amp; Tricks: Working with Lovable</title><link>https://cloudartisan.com/posts/2025-09-02-claude-code-tips-working-with-lovable/</link><pubDate>Tue, 02 Sep 2025 00:00:00 +1000</pubDate><guid>https://cloudartisan.com/posts/2025-09-02-claude-code-tips-working-with-lovable/</guid><description>&lt;h2 id="when-ai-tools-collide-a-real-world-experience" class="relative group"&gt;When AI Tools Collide: A Real-World Experience &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100"&gt;&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#when-ai-tools-collide-a-real-world-experience" aria-label="Anchor"&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;While building my latest project, 
 
 &lt;a href="https://cloudartisan.com/projects/palettekit/"&gt;Palette Kit&lt;/a&gt; (a React/TypeScript app for managing colored pencil gradients), I discovered something interesting: using &lt;a href="https://docs.anthropic.com/en/docs/about-claude/claude" target="_blank" rel="noreferrer"&gt;Claude Code&lt;/a&gt; and &lt;a href="https://lovable.dev" target="_blank" rel="noreferrer"&gt;Lovable&lt;/a&gt; together is incredibly powerful, but it requires a specific approach to avoid some nasty pitfalls.&lt;/p&gt;
&lt;p&gt;Honestly, I nearly broke my entire deployment pipeline learning this the hard way. But here&amp;rsquo;s what I learned – and how you can make these tools work beautifully together without the pain I went through.&lt;/p&gt;</description></item><item><title>Getting Started with Google Gemini CLI</title><link>https://cloudartisan.com/posts/2025-07-04-getting-started-google-gemini-cli/</link><pubDate>Fri, 04 Jul 2025 19:10:04 +1000</pubDate><guid>https://cloudartisan.com/posts/2025-07-04-getting-started-google-gemini-cli/</guid><description>&lt;p&gt;Google recently released their own entry into the agentic CLI arena: Gemini CLI. What might set it apart from OpenAI&amp;rsquo;s Codex CLI and Anthropic&amp;rsquo;s Claude Code is Gemini&amp;rsquo;s large context window and support for multimodal input.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve started testing it out to see just how it compares to Codex CLI and Claude Code (the latter of which I&amp;rsquo;ve been using regularly). This is where I started&amp;hellip;&lt;/p&gt;
&lt;h2 id="what-you-can-do-with-gemini-cli" class="relative group"&gt;What You Can Do with Gemini CLI &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100"&gt;&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#what-you-can-do-with-gemini-cli" aria-label="Anchor"&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;With Gemini CLI you can:&lt;/p&gt;</description></item><item><title>OpenAI Codex Tips &amp; Tricks: Listing Available Models</title><link>https://cloudartisan.com/posts/2025-04-21-openai-codex-tips-tricks/</link><pubDate>Mon, 21 Apr 2025 09:00:00 +1000</pubDate><guid>https://cloudartisan.com/posts/2025-04-21-openai-codex-tips-tricks/</guid><description>&lt;p&gt;After 
 
 &lt;a href="https://cloudartisan.com/posts/2025-04-18-getting-started-with-openai-codex-cli/"&gt;getting started with OpenAI Codex CLI&lt;/a&gt;, I&amp;rsquo;ve discovered some handy tips to make working with it a bit easier.&lt;/p&gt;
&lt;h2 id="listing-available-models" class="relative group"&gt;Listing Available Models &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100"&gt;&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#listing-available-models" aria-label="Anchor"&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;When working with Codex CLI, you can specify which model to use with the &lt;code&gt;-m&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;codex -m o4-mini &lt;span class="s2"&gt;&amp;#34;explain this code&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But what if you want to know all the models available to you? The default documentation doesn&amp;rsquo;t provide a straightforward way to list them. Here&amp;rsquo;s a simple one-liner that queries the OpenAI API to list all models available to your account:&lt;/p&gt;</description></item><item><title>Getting Started with OpenAI Codex CLI</title><link>https://cloudartisan.com/posts/2025-04-18-getting-started-with-openai-codex-cli/</link><pubDate>Fri, 18 Apr 2025 12:00:00 +1000</pubDate><guid>https://cloudartisan.com/posts/2025-04-18-getting-started-with-openai-codex-cli/</guid><description>&lt;p&gt;I&amp;rsquo;ve been playing with the recently announced OpenAI Codex CLI.&lt;/p&gt;
&lt;h2 id="what-is-openai-codex-cli" class="relative group"&gt;What is OpenAI Codex CLI? &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100"&gt;&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#what-is-openai-codex-cli" aria-label="Anchor"&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/openai/codex" target="_blank" rel="noreferrer"&gt;OpenAI Codex CLI is available on GitHub&lt;/a&gt;. It&amp;rsquo;s a lightweight AI coding assistant that runs directly in the terminal, like Claude Code from Anthropic.&lt;/p&gt;
&lt;p&gt;Features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read, modify, and run code&lt;/li&gt;
&lt;li&gt;Multimodal input for processing screenshots and diagrams&lt;/li&gt;
&lt;li&gt;Different approval levels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While it&amp;rsquo;s still labeled as experimental, OpenAI is actively seeking community contributions. They&amp;rsquo;re even offering a &lt;a href="https://openai.com/form/codex-open-source-fund/" target="_blank" rel="noreferrer"&gt;$1 million initiative&lt;/a&gt; supporting open-source projects that use Codex CLI, with grants in $25,000 API credit increments.&lt;/p&gt;</description></item><item><title>Claude Code Tips &amp; Tricks: Maximising Memory</title><link>https://cloudartisan.com/posts/2025-04-16-claude-code-tips-memory/</link><pubDate>Wed, 16 Apr 2025 10:55:08 +1000</pubDate><guid>https://cloudartisan.com/posts/2025-04-16-claude-code-tips-memory/</guid><description>&lt;h2 id="the-power-of-memory-in-claude-code" class="relative group"&gt;The Power of Memory in Claude Code &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100"&gt;&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#the-power-of-memory-in-claude-code" aria-label="Anchor"&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Having used Claude Code for a while now to help manage this website and other projects, I&amp;rsquo;ve come to appreciate how crucial its memory features are for productive work. In AI assistants like Claude, memory refers to the system&amp;rsquo;s ability to retain information across interactions, which can significantly reduce repetitive instructions and improve continuity.&lt;/p&gt;</description></item><item><title>Claude Code Tips &amp; Tricks: Custom Slash Commands</title><link>https://cloudartisan.com/posts/2025-04-14-claude-code-tips-slash-commands/</link><pubDate>Mon, 14 Apr 2025 15:18:37 +1000</pubDate><guid>https://cloudartisan.com/posts/2025-04-14-claude-code-tips-slash-commands/</guid><description>&lt;h2 id="the-power-of-custom-slash-commands" class="relative group"&gt;The Power of Custom Slash Commands &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100"&gt;&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#the-power-of-custom-slash-commands" aria-label="Anchor"&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve been using Claude Code to help manage this website, and I kept finding myself typing similar instructions repeatedly: &amp;ldquo;Create a new draft post titled &amp;lt;X&amp;gt;,&amp;rdquo; &amp;ldquo;Check this file for spelling, grammar, and UK English,&amp;rdquo; &amp;ldquo;Clear the cache and start the server&amp;rdquo; in a very wordy way with a lot of back and forth — these repetitive tasks were begging to be streamlined.&lt;/p&gt;</description></item><item><title>Claude Code Tips &amp; Tricks: Setting Up MCP Servers</title><link>https://cloudartisan.com/posts/2025-04-12-adding-mcp-servers-claude-code/</link><pubDate>Sat, 12 Apr 2025 00:00:00 +1000</pubDate><guid>https://cloudartisan.com/posts/2025-04-12-adding-mcp-servers-claude-code/</guid><description>&lt;h2 id="what-are-mcp-servers" class="relative group"&gt;What Are MCP Servers? &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100"&gt;&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#what-are-mcp-servers" aria-label="Anchor"&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Model Context Protocol (MCP) servers extend AI Assistants&amp;rsquo; capabilities by connecting them to external tools and services.&lt;/p&gt;
&lt;p&gt;Recently, Claude Code gained support for MCP servers, enabling integration with more specialised services like Stripe, Cloudflare, Supabase, Blender, and a whole lot more.&lt;/p&gt;
&lt;p&gt;This post demonstrates setting up some simple reference MCP servers. These servers won&amp;rsquo;t dramatically enhance Claude Code, since it already has built-in tools for filesystem, git, and web fetching. However, they serve as a gentle introduction to installing and configuring MCP servers without having to worry about overly-complex configuration. We can tackle more advanced integrations later in a future post.&lt;/p&gt;</description></item></channel></rss>